
HD44780_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000005c8  0000065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c8  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a93  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c7  00000000  00000000  00003562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	1f 02       	muls	r17, r31
  6a:	71 02       	muls	r23, r17
  6c:	71 02       	muls	r23, r17
  6e:	71 02       	muls	r23, r17
  70:	71 02       	muls	r23, r17
  72:	71 02       	muls	r23, r17
  74:	71 02       	muls	r23, r17
  76:	71 02       	muls	r23, r17
  78:	1f 02       	muls	r17, r31
  7a:	71 02       	muls	r23, r17
  7c:	71 02       	muls	r23, r17
  7e:	71 02       	muls	r23, r17
  80:	71 02       	muls	r23, r17
  82:	71 02       	muls	r23, r17
  84:	71 02       	muls	r23, r17
  86:	71 02       	muls	r23, r17
  88:	21 02       	muls	r18, r17
  8a:	71 02       	muls	r23, r17
  8c:	71 02       	muls	r23, r17
  8e:	71 02       	muls	r23, r17
  90:	71 02       	muls	r23, r17
  92:	71 02       	muls	r23, r17
  94:	71 02       	muls	r23, r17
  96:	71 02       	muls	r23, r17
  98:	71 02       	muls	r23, r17
  9a:	71 02       	muls	r23, r17
  9c:	71 02       	muls	r23, r17
  9e:	71 02       	muls	r23, r17
  a0:	71 02       	muls	r23, r17
  a2:	71 02       	muls	r23, r17
  a4:	71 02       	muls	r23, r17
  a6:	71 02       	muls	r23, r17
  a8:	21 02       	muls	r18, r17
  aa:	71 02       	muls	r23, r17
  ac:	71 02       	muls	r23, r17
  ae:	71 02       	muls	r23, r17
  b0:	71 02       	muls	r23, r17
  b2:	71 02       	muls	r23, r17
  b4:	71 02       	muls	r23, r17
  b6:	71 02       	muls	r23, r17
  b8:	71 02       	muls	r23, r17
  ba:	71 02       	muls	r23, r17
  bc:	71 02       	muls	r23, r17
  be:	71 02       	muls	r23, r17
  c0:	71 02       	muls	r23, r17
  c2:	71 02       	muls	r23, r17
  c4:	71 02       	muls	r23, r17
  c6:	71 02       	muls	r23, r17
  c8:	6d 02       	muls	r22, r29
  ca:	71 02       	muls	r23, r17
  cc:	71 02       	muls	r23, r17
  ce:	71 02       	muls	r23, r17
  d0:	71 02       	muls	r23, r17
  d2:	71 02       	muls	r23, r17
  d4:	71 02       	muls	r23, r17
  d6:	71 02       	muls	r23, r17
  d8:	4a 02       	muls	r20, r26
  da:	71 02       	muls	r23, r17
  dc:	71 02       	muls	r23, r17
  de:	71 02       	muls	r23, r17
  e0:	71 02       	muls	r23, r17
  e2:	71 02       	muls	r23, r17
  e4:	71 02       	muls	r23, r17
  e6:	71 02       	muls	r23, r17
  e8:	71 02       	muls	r23, r17
  ea:	71 02       	muls	r23, r17
  ec:	71 02       	muls	r23, r17
  ee:	71 02       	muls	r23, r17
  f0:	71 02       	muls	r23, r17
  f2:	71 02       	muls	r23, r17
  f4:	71 02       	muls	r23, r17
  f6:	71 02       	muls	r23, r17
  f8:	3e 02       	muls	r19, r30
  fa:	71 02       	muls	r23, r17
  fc:	71 02       	muls	r23, r17
  fe:	71 02       	muls	r23, r17
 100:	71 02       	muls	r23, r17
 102:	71 02       	muls	r23, r17
 104:	71 02       	muls	r23, r17
 106:	71 02       	muls	r23, r17
 108:	5c 02       	muls	r21, r28

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e8 ec       	ldi	r30, 0xC8	; 200
 11e:	f5 e0       	ldi	r31, 0x05	; 5
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a8 30       	cpi	r26, 0x08	; 8
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a8 e0       	ldi	r26, 0x08	; 8
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a6 31       	cpi	r26, 0x16	; 22
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
 140:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <HD44780_TWI_send_data>:
/// @param cmd Command to send
void HD44780_TWI_send_data(char data)
{
	unsigned char data_HigNib, data_LowNib;
	
	data_HigNib = (data & 0xF0);
 148:	28 2f       	mov	r18, r24
 14a:	20 7f       	andi	r18, 0xF0	; 240
	data_LowNib = ((data<<4) & 0xF0);
 14c:	30 e1       	ldi	r19, 0x10	; 16
 14e:	83 9f       	mul	r24, r19
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
	messageBuf[1] = data_HigNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_RS | HD44780_TWI_E;		
 154:	e1 e1       	ldi	r30, 0x11	; 17
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	92 2f       	mov	r25, r18
 15a:	9d 60       	ori	r25, 0x0D	; 13
 15c:	91 83       	std	Z+1, r25	; 0x01
	messageBuf[2] = (data_HigNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_RS) & (~HD44780_TWI_E);
 15e:	29 60       	ori	r18, 0x09	; 9
 160:	22 83       	std	Z+2, r18	; 0x02
	messageBuf[3] = data_LowNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_RS | HD44780_TWI_E;
 162:	98 2f       	mov	r25, r24
 164:	9d 60       	ori	r25, 0x0D	; 13
 166:	93 83       	std	Z+3, r25	; 0x03
	messageBuf[4] = (data_LowNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_RS) & (~HD44780_TWI_E);
 168:	82 7f       	andi	r24, 0xF2	; 242
 16a:	89 60       	ori	r24, 0x09	; 9
 16c:	84 83       	std	Z+4, r24	; 0x04
	
	messageBuf[0] = (HD44780_TWI_SLAVE_ADRES) | (TWI_WRITE<<TWI_RW_BIT);		
 16e:	8e e4       	ldi	r24, 0x4E	; 78
 170:	80 83       	st	Z, r24
	TWI_Start_Transceiver_With_Data(messageBuf, 5);
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	cf 01       	movw	r24, r30
 176:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Start_Transceiver_With_Data>
 17a:	08 95       	ret

0000017c <HD44780_TWI_send_cmd>:
/// @param cmd Command to send
void HD44780_TWI_send_cmd (char cmd)
{
	unsigned char data_HigNib, data_LowNib;
		
	data_HigNib = (cmd & 0xF0);
 17c:	28 2f       	mov	r18, r24
 17e:	20 7f       	andi	r18, 0xF0	; 240
	data_LowNib = ((cmd<<4) & 0xF0);
 180:	30 e1       	ldi	r19, 0x10	; 16
 182:	83 9f       	mul	r24, r19
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
	messageBuf[1] = data_HigNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_E;
 188:	e1 e1       	ldi	r30, 0x11	; 17
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	92 2f       	mov	r25, r18
 18e:	9c 60       	ori	r25, 0x0C	; 12
 190:	91 83       	std	Z+1, r25	; 0x01
	messageBuf[2] = (data_HigNib | HD44780_TWI_BACKLIGHT) & (~HD44780_TWI_E);
 192:	28 60       	ori	r18, 0x08	; 8
 194:	22 83       	std	Z+2, r18	; 0x02
	messageBuf[3] = data_LowNib | HD44780_TWI_BACKLIGHT | HD44780_TWI_E;
 196:	98 2f       	mov	r25, r24
 198:	9c 60       	ori	r25, 0x0C	; 12
 19a:	93 83       	std	Z+3, r25	; 0x03
	messageBuf[4] = (data_LowNib | HD44780_TWI_BACKLIGHT) & (~HD44780_TWI_E);
 19c:	83 7f       	andi	r24, 0xF3	; 243
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	84 83       	std	Z+4, r24	; 0x04
	
	messageBuf[0] = (HD44780_TWI_SLAVE_ADRES) | (TWI_WRITE<<TWI_RW_BIT);		
 1a2:	8e e4       	ldi	r24, 0x4E	; 78
 1a4:	80 83       	st	Z, r24
	TWI_Start_Transceiver_With_Data(messageBuf, 5);
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	cf 01       	movw	r24, r30
 1aa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Start_Transceiver_With_Data>
 1ae:	08 95       	ret

000001b0 <HD44780_TWI_init>:
/// HD44780_TWI_init
///
/// This function initializes the HD44780 lcd driver
void HD44780_TWI_init()
{
	TWI_Master_Initialise(HD44780_TWI_BUS_FREQ);
 1b0:	60 ea       	ldi	r22, 0xA0	; 160
 1b2:	76 e8       	ldi	r23, 0x86	; 134
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 b9 01 	call	0x372	; 0x372 <TWI_Master_Initialise>
	sei();
 1bc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	80 e7       	ldi	r24, 0x70	; 112
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <HD44780_TWI_init+0x14>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <HD44780_TWI_init+0x1e>
 1ce:	00 00       	nop

	//Power up delay
	_delay_ms(50);

	//Initial startup sequence
	HD44780_TWI_send_cmd(HD44780_TWI_START_INIT);
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	9d e5       	ldi	r25, 0x5D	; 93
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <HD44780_TWI_init+0x2a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <HD44780_TWI_init+0x30>
 1e0:	00 00       	nop
	_delay_ms(6);
	HD44780_TWI_send_cmd(HD44780_TWI_START_INIT);
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	9f e1       	ldi	r25, 0x1F	; 31
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <HD44780_TWI_init+0x3c>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <HD44780_TWI_init+0x42>
 1f2:	00 00       	nop
	_delay_ms(2);
	HD44780_TWI_send_cmd(HD44780_TWI_START_INIT);
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 1fa:	8f ed       	ldi	r24, 0xDF	; 223
 1fc:	9b ea       	ldi	r25, 0xAB	; 171
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <HD44780_TWI_init+0x4e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <HD44780_TWI_init+0x54>
 204:	00 00       	nop
	_delay_ms(11);

	//4bit mode
	HD44780_TWI_send_cmd(HD44780_TWI_FUNCTION_SET | HD44780_TWI_4_BITMODE);
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>

	//Function set
	HD44780_TWI_send_cmd(HD44780_TWI_FUNCTION_SET | HD44780_TWI_4_BITMODE | HD44780_TWI_2_LINE | HD44780_TWI_5x8DOTS);
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9f e1       	ldi	r25, 0x1F	; 31
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <HD44780_TWI_init+0x66>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <HD44780_TWI_init+0x6c>
 21c:	00 00       	nop
	_delay_ms(2);  ;

	//Display ON/OFF control
	_displayCMD = HD44780_TWI_DISPLAY_CONTROL | HD44780_TWI_DISPLAY_OFF | HD44780_TWI_CURSOR_OFF | HD44780_TWI_BLINK_OFF;
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	HD44780_TWI_send_cmd(_displayCMD);
 224:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9f e1       	ldi	r25, 0x1F	; 31
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <HD44780_TWI_init+0x7c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <HD44780_TWI_init+0x82>
 232:	00 00       	nop
	_delay_ms(2);

	//Clear display
	HD44780_TWI_send_cmd(HD44780_TWI_CLEAR_LCD);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	9e e3       	ldi	r25, 0x3E	; 62
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <HD44780_TWI_init+0x8e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <HD44780_TWI_init+0x94>
 244:	00 00       	nop
	_delay_ms(4);

	//Entry mode set
	HD44780_TWI_send_cmd(HD44780_TWI_ENTRY_MODE_SET | HD44780_TWI_INCREMENT | HD44780_TWI_ENTRY_SHIFT_DECREMENT);
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	9f e1       	ldi	r25, 0x1F	; 31
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <HD44780_TWI_init+0xa0>
 254:	00 c0       	rjmp	.+0      	; 0x256 <HD44780_TWI_init+0xa6>
 256:	00 00       	nop
	_delay_ms(2);

	//Display ON/OFF control
	_displayCMD = HD44780_TWI_DISPLAY_CONTROL | HD44780_TWI_DISPLAY_ON | HD44780_TWI_CURSOR_OFF | HD44780_TWI_BLINK_OFF;
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	HD44780_TWI_send_cmd(_displayCMD);
 25e:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 262:	08 95       	ret

00000264 <HD44780_TWI_lcd_clear>:
/// HD44780_TWI_lcd_clear 
///
/// This functions clears the display
void HD44780_TWI_lcd_clear(void)
{
   HD44780_TWI_send_cmd(HD44780_TWI_CLEAR_LCD);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9f e1       	ldi	r25, 0x1F	; 31
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <HD44780_TWI_lcd_clear+0xa>
 272:	00 c0       	rjmp	.+0      	; 0x274 <HD44780_TWI_lcd_clear+0x10>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <HD44780_TWI_set_cursor>:
/// @param y This is the sow selected
/// @returns Error state (ERROR or SUCCES)
/// @note The max rows and columns are set in the header file via HD44780_TWI_MAX_COLLUMS and  HD44780_TWI_MAX_ROWS
void HD44780_TWI_set_cursor(int row, int col)
{
	switch(row)
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	91 05       	cpc	r25, r1
 27c:	79 f0       	breq	.+30     	; 0x29c <HD44780_TWI_set_cursor+0x24>
 27e:	1c f4       	brge	.+6      	; 0x286 <HD44780_TWI_set_cursor+0xe>
 280:	89 2b       	or	r24, r25
 282:	39 f0       	breq	.+14     	; 0x292 <HD44780_TWI_set_cursor+0x1a>
 284:	1d c0       	rjmp	.+58     	; 0x2c0 <HD44780_TWI_set_cursor+0x48>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	91 05       	cpc	r25, r1
 28a:	71 f0       	breq	.+28     	; 0x2a8 <HD44780_TWI_set_cursor+0x30>
 28c:	03 97       	sbiw	r24, 0x03	; 3
 28e:	91 f0       	breq	.+36     	; 0x2b4 <HD44780_TWI_set_cursor+0x3c>
 290:	17 c0       	rjmp	.+46     	; 0x2c0 <HD44780_TWI_set_cursor+0x48>
	{
		case 0:
			HD44780_TWI_send_cmd(HD44780_TWI_SET_DRAM_ADDRESS | (HD44780_TWI_STARTADR_ROW_0 + col));
 292:	86 2f       	mov	r24, r22
 294:	80 68       	ori	r24, 0x80	; 128
 296:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
			break;
 29a:	08 95       	ret
		case 1:
			HD44780_TWI_send_cmd(HD44780_TWI_SET_DRAM_ADDRESS | (HD44780_TWI_STARTADR_ROW_1 + col));
 29c:	80 e4       	ldi	r24, 0x40	; 64
 29e:	86 0f       	add	r24, r22
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
			break;
 2a6:	08 95       	ret
		case 2:
			HD44780_TWI_send_cmd(HD44780_TWI_SET_DRAM_ADDRESS | (HD44780_TWI_STARTADR_ROW_2 + col));
 2a8:	84 e1       	ldi	r24, 0x14	; 20
 2aa:	86 0f       	add	r24, r22
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
			break;
 2b2:	08 95       	ret
		case 3: 
		    HD44780_TWI_send_cmd(HD44780_TWI_SET_DRAM_ADDRESS | (HD44780_TWI_STARTADR_ROW_3 + col));
 2b4:	84 e5       	ldi	r24, 0x54	; 84
 2b6:	86 0f       	add	r24, r22
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
			break;
 2be:	08 95       	ret
		default:
			HD44780_TWI_send_cmd(HD44780_TWI_SET_DRAM_ADDRESS | (HD44780_TWI_STARTADR_ROW_0 + col));
 2c0:	86 2f       	mov	r24, r22
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	0e 94 be 00 	call	0x17c	; 0x17c <HD44780_TWI_send_cmd>
 2c8:	08 95       	ret

000002ca <HD44780_TWI_send_string>:

/// Writes a string to the LCD display
///
/// @param *str String to write to the display
void HD44780_TWI_send_string(char *str)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
	while(*str)
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <HD44780_TWI_send_string+0xe>
	{
		HD44780_TWI_send_data(*str++);
 2d2:	21 96       	adiw	r28, 0x01	; 1
 2d4:	0e 94 a4 00 	call	0x148	; 0x148 <HD44780_TWI_send_data>
/// Writes a string to the LCD display
///
/// @param *str String to write to the display
void HD44780_TWI_send_string(char *str)
{
	while(*str)
 2d8:	88 81       	ld	r24, Y
 2da:	81 11       	cpse	r24, r1
 2dc:	fa cf       	rjmp	.-12     	; 0x2d2 <HD44780_TWI_send_string+0x8>
	{
		HD44780_TWI_send_data(*str++);
	}

}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <main>:


int main(void)


{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <main+0x6>
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <main+0x8>
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
    int counter = 0;
	char buf[5];


    DDRC &= (1<<DDC4) | (1<<DDC5);												//Make SDA and SCL inputs 
 2f2:	87 b1       	in	r24, 0x07	; 7
 2f4:	80 73       	andi	r24, 0x30	; 48
 2f6:	87 b9       	out	0x07, r24	; 7
   	PORTC &= ~(1<<PORTC4) | ~(1<<PORTC5);										//Disable internal pullups on SDA and SCL
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	88 b9       	out	0x08, r24	; 8

    HD44780_TWI_init();
 2fc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HD44780_TWI_init>

	HD44780_TWI_lcd_clear();
 300:	0e 94 32 01 	call	0x264	; 0x264 <HD44780_TWI_lcd_clear>
	HD44780_TWI_set_cursor(0, 0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 3c 01 	call	0x278	; 0x278 <HD44780_TWI_set_cursor>
	HD44780_TWI_send_string("A=");
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 65 01 	call	0x2ca	; 0x2ca <HD44780_TWI_send_string>
	
	//HD44780_TWI_cursor_blinking_onoff(ON);
	
    while (1) 
    {
	   for (counter=0;counter<20;counter++)
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	26 c0       	rjmp	.+76     	; 0x36a <main+0x86>
	   {
	      HD44780_TWI_set_cursor(0, 3);
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 3c 01 	call	0x278	; 0x278 <HD44780_TWI_set_cursor>
		  HD44780_TWI_send_string("  ");
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 65 01 	call	0x2ca	; 0x2ca <HD44780_TWI_send_string>
		  HD44780_TWI_set_cursor(0, 3);
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 3c 01 	call	0x278	; 0x278 <HD44780_TWI_set_cursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	be 01       	movw	r22, r28
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	c8 01       	movw	r24, r16
 348:	0e 94 ad 02 	call	0x55a	; 0x55a <__itoa_ncheck>
		  itoa(counter,buf,10); 
	      HD44780_TWI_send_string(buf);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 65 01 	call	0x2ca	; 0x2ca <HD44780_TWI_send_string>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	89 e6       	ldi	r24, 0x69	; 105
 358:	98 e1       	ldi	r25, 0x18	; 24
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x76>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x80>
 364:	00 00       	nop
	
	//HD44780_TWI_cursor_blinking_onoff(ON);
	
    while (1) 
    {
	   for (counter=0;counter<20;counter++)
 366:	0f 5f       	subi	r16, 0xFF	; 255
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	04 31       	cpi	r16, 0x14	; 20
 36c:	11 05       	cpc	r17, r1
 36e:	bc f2       	brlt	.-82     	; 0x31e <main+0x3a>
 370:	d3 cf       	rjmp	.-90     	; 0x318 <main+0x34>

00000372 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 372:	9b 01       	movw	r18, r22
 374:	ac 01       	movw	r20, r24
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	74 e2       	ldi	r23, 0x24	; 36
 37a:	84 ef       	ldi	r24, 0xF4	; 244
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodsi4>
 382:	da 01       	movw	r26, r20
 384:	c9 01       	movw	r24, r18
 386:	40 97       	sbiw	r24, 0x10	; 16
 388:	a1 09       	sbc	r26, r1
 38a:	b1 09       	sbc	r27, r1
 38c:	b6 95       	lsr	r27
 38e:	a7 95       	ror	r26
 390:	97 95       	ror	r25
 392:	87 95       	ror	r24
 394:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a4:	08 95       	ret

000003a6 <TWI_Transceiver_Busy>:
 3a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3aa:	81 70       	andi	r24, 0x01	; 1
 3ac:	08 95       	ret

000003ae <TWI_Start_Transceiver_With_Data>:
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	8c 01       	movw	r16, r24
 3b6:	c6 2f       	mov	r28, r22
 3b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <TWI_Transceiver_Busy>
 3bc:	81 11       	cpse	r24, r1
 3be:	fc cf       	rjmp	.-8      	; 0x3b8 <TWI_Start_Transceiver_With_Data+0xa>
 3c0:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <TWI_msgSize>
 3c4:	f8 01       	movw	r30, r16
 3c6:	80 81       	ld	r24, Z
 3c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TWI_buf>
 3cc:	80 ff       	sbrs	r24, 0
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <TWI_Start_Transceiver_With_Data+0x3c>
 3d0:	0f c0       	rjmp	.+30     	; 0x3f0 <TWI_Start_Transceiver_With_Data+0x42>
 3d2:	82 2f       	mov	r24, r18
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	f8 01       	movw	r30, r16
 3d8:	e8 0f       	add	r30, r24
 3da:	f9 1f       	adc	r31, r25
 3dc:	30 81       	ld	r19, Z
 3de:	fc 01       	movw	r30, r24
 3e0:	e4 5f       	subi	r30, 0xF4	; 244
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	30 83       	st	Z, r19
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <TWI_Start_Transceiver_With_Data+0x3e>
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	2c 17       	cp	r18, r28
 3ee:	88 f3       	brcs	.-30     	; 0x3d2 <TWI_Start_Transceiver_With_Data+0x24>
 3f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TWI_statusReg>
 3f4:	88 ef       	ldi	r24, 0xF8	; 248
 3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fa:	85 ea       	ldi	r24, 0xA5	; 165
 3fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 422:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 426:	8e 2f       	mov	r24, r30
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	38 97       	sbiw	r30, 0x08	; 8
 42e:	e1 35       	cpi	r30, 0x51	; 81
 430:	f1 05       	cpc	r31, r1
 432:	08 f0       	brcs	.+2      	; 0x436 <__vector_24+0x2e>
 434:	56 c0       	rjmp	.+172    	; 0x4e2 <__vector_24+0xda>
 436:	ec 5c       	subi	r30, 0xCC	; 204
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 43e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TWI_bufPtr.1672>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 442:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <TWI_bufPtr.1672>
 446:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TWI_msgSize>
 44a:	e8 17       	cp	r30, r24
 44c:	70 f4       	brcc	.+28     	; 0x46a <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	8e 0f       	add	r24, r30
 452:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TWI_bufPtr.1672>
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	e4 5f       	subi	r30, 0xF4	; 244
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	80 81       	ld	r24, Z
 45e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 462:	85 e8       	ldi	r24, 0x85	; 133
 464:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 468:	43 c0       	rjmp	.+134    	; 0x4f0 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else												  // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 46a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TWI_statusReg>
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 474:	84 e9       	ldi	r24, 0x94	; 148
 476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 47a:	3a c0       	rjmp	.+116    	; 0x4f0 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:								  // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 47c:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <TWI_bufPtr.1672>
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	8e 0f       	add	r24, r30
 484:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TWI_bufPtr.1672>
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 48e:	e4 5f       	subi	r30, 0xF4	; 244
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:								  // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 494:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <TWI_bufPtr.1672>
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TWI_msgSize>
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	24 f4       	brge	.+8      	; 0x4b0 <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4a8:	85 ec       	ldi	r24, 0xC5	; 197
 4aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ae:	20 c0       	rjmp	.+64     	; 0x4f0 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else												  // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4b0:	85 e8       	ldi	r24, 0x85	; 133
 4b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4b6:	1c c0       	rjmp	.+56     	; 0x4f0 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 4b8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <TWI_bufPtr.1672>
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4c2:	e4 5f       	subi	r30, 0xF4	; 244
 4c4:	fe 4f       	sbci	r31, 0xFE	; 254
 4c6:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 4c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TWI_statusReg>
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4d2:	84 e9       	ldi	r24, 0x94	; 148
 4d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4da:	85 ea       	ldi	r24, 0xA5	; 165
 4dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 4e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	3f 91       	pop	r19
 4fe:	2f 91       	pop	r18
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <__udivmodsi4>:
 50a:	a1 e2       	ldi	r26, 0x21	; 33
 50c:	1a 2e       	mov	r1, r26
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	fd 01       	movw	r30, r26
 514:	0d c0       	rjmp	.+26     	; 0x530 <__udivmodsi4_ep>

00000516 <__udivmodsi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	ee 1f       	adc	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	a2 17       	cp	r26, r18
 520:	b3 07       	cpc	r27, r19
 522:	e4 07       	cpc	r30, r20
 524:	f5 07       	cpc	r31, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__udivmodsi4_ep>
 528:	a2 1b       	sub	r26, r18
 52a:	b3 0b       	sbc	r27, r19
 52c:	e4 0b       	sbc	r30, r20
 52e:	f5 0b       	sbc	r31, r21

00000530 <__udivmodsi4_ep>:
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	1a 94       	dec	r1
 53a:	69 f7       	brne	.-38     	; 0x516 <__udivmodsi4_loop>
 53c:	60 95       	com	r22
 53e:	70 95       	com	r23
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	9b 01       	movw	r18, r22
 546:	ac 01       	movw	r20, r24
 548:	bd 01       	movw	r22, r26
 54a:	cf 01       	movw	r24, r30
 54c:	08 95       	ret

0000054e <__tablejump2__>:
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	05 90       	lpm	r0, Z+
 554:	f4 91       	lpm	r31, Z
 556:	e0 2d       	mov	r30, r0
 558:	09 94       	ijmp

0000055a <__itoa_ncheck>:
 55a:	bb 27       	eor	r27, r27
 55c:	4a 30       	cpi	r20, 0x0A	; 10
 55e:	31 f4       	brne	.+12     	; 0x56c <__itoa_ncheck+0x12>
 560:	99 23       	and	r25, r25
 562:	22 f4       	brpl	.+8      	; 0x56c <__itoa_ncheck+0x12>
 564:	bd e2       	ldi	r27, 0x2D	; 45
 566:	90 95       	com	r25
 568:	81 95       	neg	r24
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__utoa_common>

00000570 <__utoa_ncheck>:
 570:	bb 27       	eor	r27, r27

00000572 <__utoa_common>:
 572:	fb 01       	movw	r30, r22
 574:	55 27       	eor	r21, r21
 576:	aa 27       	eor	r26, r26
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	aa 1f       	adc	r26, r26
 57e:	a4 17       	cp	r26, r20
 580:	10 f0       	brcs	.+4      	; 0x586 <__utoa_common+0x14>
 582:	a4 1b       	sub	r26, r20
 584:	83 95       	inc	r24
 586:	50 51       	subi	r21, 0x10	; 16
 588:	b9 f7       	brne	.-18     	; 0x578 <__utoa_common+0x6>
 58a:	a0 5d       	subi	r26, 0xD0	; 208
 58c:	aa 33       	cpi	r26, 0x3A	; 58
 58e:	08 f0       	brcs	.+2      	; 0x592 <__utoa_common+0x20>
 590:	a9 5d       	subi	r26, 0xD9	; 217
 592:	a1 93       	st	Z+, r26
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	79 f7       	brne	.-34     	; 0x576 <__utoa_common+0x4>
 598:	b1 11       	cpse	r27, r1
 59a:	b1 93       	st	Z+, r27
 59c:	11 92       	st	Z+, r1
 59e:	cb 01       	movw	r24, r22
 5a0:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <strrev>

000005a4 <strrev>:
 5a4:	dc 01       	movw	r26, r24
 5a6:	fc 01       	movw	r30, r24
 5a8:	67 2f       	mov	r22, r23
 5aa:	71 91       	ld	r23, Z+
 5ac:	77 23       	and	r23, r23
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <strrev+0x4>
 5b0:	32 97       	sbiw	r30, 0x02	; 2
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <strrev+0x18>
 5b4:	7c 91       	ld	r23, X
 5b6:	6d 93       	st	X+, r22
 5b8:	70 83       	st	Z, r23
 5ba:	62 91       	ld	r22, -Z
 5bc:	ae 17       	cp	r26, r30
 5be:	bf 07       	cpc	r27, r31
 5c0:	c8 f3       	brcs	.-14     	; 0x5b4 <strrev+0x10>
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
